# 1. 행, 열, 대각/, 대각\ 순회해서
# 2. 'o' 연속으로 나타날때마다 cnt 1씩 증가
# 3. cnt 5개 이상이면 YES, 아니면 NO

T = int(input()) # 테스트 케이스
for tc in range(1, T+1):
    N = int(input())                           # N x N 오목판
    # arr = [[0]*N for _ in range(N)]          # 오목판 생성
    stone = [list(input()) for _ in range(N)]  # 돌 놓기(숫자 아니고, 공백 없음)

    result = 'NO'                   # 아직 오목 확인 못했음
    for r in range(N):              # 0부터 N-1까지 행 순회
        cnt = 0                     # 한 행 순회할때마다 초기화 돼야하니까
        for c in range(N):
            if stone[r][c] == 'o':  # 돌이 놓여있다면
                cnt += 1            # 카운트
                if cnt >= 5:        # 사실 5목이고, 오목판이 5x5여서 5를 넘어갈일이 없지만 문제에서 다섯개 이상이라고 표현해서 >= 사용
                    result = 'YES'  # 일단 오목인거 하나라도 발견했으면
                    break           # 그만 순회해도 되는거 아닌가 개수 세는 것도 아닌데
            else:                   # 'o'가 아니라면
                cnt = 0             # 연속된'o'가 아니므로 초기화(테스트 케이스가 5x5배열이라 이 문제에서는 큰 상관없지만, 오목판 배열이 크다면 끊겼다가 다시 돌을 놓았을 수 도 있음)
        if result == 'YES':         # 이미 오목을 찾았다면
            break                   # 다른 행 더 탐색할 필요 없음
    # ------------------------------------------------------------------
    for c in range(N):              # 0부터 N-1까지 열 순회
        cnt = 0                     # 한 행 순회할때마다 초기화 돼야하니까
        for r in range(N):
            if stone[r][c] == 'o':  # 돌이 놓여있다면
                cnt += 1            # 카운트
                if cnt >= 5:        # 사실 5목이고, 오목판이 5x5여서 5를 넘어갈일이 없지만 문제에서 다섯개 이상이라고 표현해서 >= 사용
                    result = 'YES'  # 일단 오목인거 하나라도 발견했으면
                    break           # 그만 순회해도 되는거 아닌가 개수 세는 것도 아닌데
            else:                   # 'o'가 아니라면
                cnt = 0             # 연속된'o'가 아니므로 초기화
        if result == 'YES':         # 이미 오목을 찾았다면
            break                   # 다른 열 더 탐색할 필요 없음
    # ------------------------------------------------------------------
    for r in range(N-4):                    # 대각/ 순회(N으로 할 경우 범위를 넘어가는 경우 생김)
        for c in range(4, N):               # 5목이기 때문에 N-4
            cnt = 0
            for k in range(5):              # 대각선방향으로 5만큼 확인
                if stone[r+k][c-k] == 'o':  # 돌이 놓여있다면
                    cnt += 1                # 카운트
                    if cnt >= 5:            # 사실 5목이고, 오목판이 5x5여서 5를 넘어갈일이 없지만 문제에서 다섯개 이상이라고 표현해서 >= 사용
                        result = 'YES'      # 일단 오목인거 하나라도 발견했으면
                        break               # 그만 순회해도 되는거 아닌가 개수 세는 것도 아닌데
                else:                       # 'o'가 아니라면
                    cnt = 0                 # 연속된'o'가 아니므로 초기화
        if result =='YES':
            break
    # ------------------------------------------------------------------
    for r in range(N-4):                    # 0부터 N-1까지 대각\ 순회
        for c in range(N-4):
            cnt = 0
            for k in range(5):
                if stone[r+k][c+k] == 'o':    # 돌이 놓여있다면
                    cnt += 1                # 카운트
                    if cnt >= 5:            # 사실 5목이고, 오목판이 5x5여서 5를 넘어갈일이 없지만 문제에서 다섯개 이상이라고 표현해서 >= 사용
                        result = 'YES'      # 일단 오목인거 하나라도 발견했으면
                        break               # 그만 순회해도 되는거 아닌가 개수 세는 것도 아닌데
                else:                       # 'o'가 아니라면
                    cnt = 0                 # 연속된'o'가 아니므로 초기화
        if result == 'YES':
            break

    print(f'#{tc} {result}')

'''
리뷰
1. 오늘도 헤매는 반복문, 조건문^^;
2. 100개 중 89개만 정답 => 대각선 검사 else 위치 수정: 93개만 정답
3. 가운데 대각선만 검사하려고 했는데 오목판 크기가 5 ~ 20이어서 모든 대각선 검사 필요
3-1. 모든 대각선 다 고려하려니 설명 참고해도 어려움;
'''